{"version":3,"sources":["./src/app/authentication-module/services/signup.service.ts","./src/app/authentication-module/login/login.component.ts","./src/app/authentication-module/login/login.component.html","./src/app/authentication-module/authentication-module.module.ts","./src/app/authentication-module/register/register.component.ts","./src/app/authentication-module/register/register.component.html","./src/app/authentication-module/services/login-service.ts"],"names":[],"mappings":"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","file":"authentication-module-authentication-module-module.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Observable, of } from \"rxjs\";\nimport { ApiConstant } from \"src/app/common/ApiConstant\";\nimport { PMConstants } from \"src/app/common/PMConstants\";\nimport { SignupOutputDTO } from \"src/app/dto/signup.output.dto\";\nimport { API } from \"src/app/services/Api\";\n\n@Injectable()\nexport class SignupService {\n    constructor(private api: API,\n                private router: Router) {\n        \n    }\n\n    public registeruser(output: SignupOutputDTO): void {\n        this.api.postWithoutHeaders(ApiConstant.USERS_BASE_URI + '/' + ApiConstant.SIGNUPU, output)\n                .subscribe(() => {\n                    this.router.navigate([PMConstants.AUTHENTICATION_MODULE_BASE_URI, PMConstants.LOGIN_URI]);\n                });\n    }\n}","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { RoutingService } from 'src/app/services/routing.service';\nimport { LoginService } from '../services/login-service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  userIdentifierFormControl: FormControl;\n  passwordFormControl: FormControl;\n\n  public hidePassword: boolean;\n  constructor(private loginService: LoginService, private routingService: RoutingService) { \n    this.hidePassword = true;\n    this.userIdentifierFormControl = new FormControl('elhadj', [Validators.required, Validators.minLength(2)]);\n    this.passwordFormControl = new FormControl('password', [Validators.required]);\n  }\n\n  ngOnInit(): void {\n  }\n\n  public isValidForm(): boolean {\n    return this.userIdentifierFormControl.valid && this.passwordFormControl.valid;\n  }\n\n  public onLogin(): void {\n    this.loginService.login({\n      userIdentifier: this.userIdentifierFormControl.value,\n      password: this.passwordFormControl.value\n    });\n  }\n\n  public gotoSignupComponent(): void {\n    this.routingService.gotoSignupComponent();\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"row d-flex justify-content-center\">\n        <div class=\"col-4\">\n           <h1 class=\"text-center\">LOGIN</h1>\n            <div class=\"d-flex flex-column justify-content-center\">\n                    <mat-form-field appearance=\"fill\" class=\"w-100\">\n                        <mat-label>Email ou Pseudo</mat-label>\n                        <input type=\"text\" matInput [formControl]=\"userIdentifierFormControl\" required minlength=\"2\">\n                        <mat-error *ngIf=\"userIdentifierFormControl.hasError('required')\">\n                            this field is <strong>required</strong>\n                        </mat-error>\n                        <mat-error *ngIf=\"userIdentifierFormControl.hasError('minlength')\">\n                            2 characteres <strong>minimum</strong>\n                        </mat-error>\n                    </mat-form-field >\n                    <mat-form-field appearance=\"fill\" class=\"w-100\">\n                        <mat-label>{{ 'loginComponent.passwordLabel' | translate }}</mat-label>\n                        <input matInput [formControl]=\"passwordFormControl\" [type]=\"hidePassword ? 'password' : 'text'\" required>\n                        <button mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hidePassword\">\n                        <mat-icon>{{hidePassword ? 'visibility_off' : 'visibility'}}</mat-icon>\n                        </button>\n                        <mat-error *ngIf=\"passwordFormControl.hasError('required')\">\n                            {{ 'loginComponent.requiredPassword' | translate }}\n                        </mat-error>\n                    </mat-form-field>\n                    <button mat-stroked-button (click)='onLogin()' [disabled]='!isValidForm()'>login</button>\n                    <span class=\"mt-4\">You don't have an account ? <a class=\"link\" style=\"color: blue; text-decoration: underline;\" (click)=\"gotoSignupComponent()\">Signup</a></span>\n            </div>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MatFormFieldModule } from '@angular/material/form-field'; \nimport { MatInputModule } from '@angular/material/input'; \nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {MatIconModule} from '@angular/material/icon'; \nimport {MatButtonModule} from '@angular/material/button'; \nimport { LoginService } from './services/login-service';\nimport { SignupService } from './services/signup.service';\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { HttpLoaderFactory } from '../app.module';\n\nconst routes: Routes = [\n  {path: '', component: LoginComponent},\n  {path: 'login', component: LoginComponent},\n  {path: 'signup', component: RegisterComponent}\n]\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatButtonModule,\n    TranslateModule.forChild({\n            loader: {provide: TranslateLoader, useFactory: HttpLoaderFactory,\n                deps: [HttpClient]\n            }\n        }),\n    RouterModule.forChild(routes)\n  ],\n  providers: [\n    LoginService,\n    SignupService\n  ]\n})\nexport class AuthenticationModuleModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService } from 'src/app/services/routing.service';\nimport { SignupService } from '../services/signup.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  public signupFormGroup: FormGroup;\n  public hidePassword: boolean;\n\n  constructor(private signupService: SignupService, private readonly routingService: RoutingService) {\n    this.hidePassword = false;\n\n    this.signupFormGroup = new FormGroup({\n      email: new FormControl('', [Validators.email]),\n      pseudo: new FormControl(''),\n      password: new FormControl('')\n    });\n   }\n\n  ngOnInit(): void {\n  }\n\n  public onSignup(): void {\n    this.signupService.registeruser({\n      email: this.signupFormGroup.get('email')?.value,\n      pseudo: this.signupFormGroup.get('pseudo')?.value,\n      password: this.signupFormGroup.get('password')?.value\n    });\n  }\n\n  get email() {\n    return this.signupFormGroup.get('email');\n  }\n\n  get pseudo() {\n    return this.signupFormGroup.get('pseudo');\n  }\n\n  get password() {\n    return this.signupFormGroup.get('password');\n  }\n\n  public gotoLoginComponent():void {\n    this.routingService.gotoLoginComponent();\n  }\n}\n","<div class=\"container\">\n    <div class=\"row justify-content-center\">\n        <div class=\"col-4\">\n            <h1 class=\"text-center\">SIGNUP</h1>\n            <form [formGroup]=\"signupFormGroup\" (ngSubmit)=\"onSignup()\" class=\"d-flex flex-column\">\n                <mat-form-field appearance=\"fill\" class=\"w-100\">\n                    <mat-label>Email</mat-label>\n                    <input type=\"email\" matInput formControlName=\"email\" required>\n                    <mat-error *ngIf=\"email?.hasError('email')\">\n                        Please enter a valid email address\n                    </mat-error>\n                    <mat-error *ngIf=\"email?.hasError('required')\">\n                        Email is <strong>required</strong>\n                    </mat-error>\n                </mat-form-field >\n\n                <mat-form-field appearance=\"fill\" class=\"w-100\">\n                    <mat-label>Pseudo</mat-label>\n                    <input type=\"text\" matInput formControlName=\"pseudo\" required>\n                    <mat-error *ngIf=\"pseudo?.hasError('required')\">\n                        Please enter a valid pseudo\n                    </mat-error>\n               </mat-form-field >\n\n                <mat-form-field appearance=\"fill\" class=\"w-100\">\n                    <mat-label>Enter your password</mat-label>\n                    <input matInput formControlName=\"password\" [type]=\"hidePassword ? 'password' : 'text'\" required>\n                    <button mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hidePassword\">\n                    <mat-icon>{{hidePassword ? 'visibility_off' : 'visibility'}}</mat-icon>\n                    </button>\n                    <mat-error *ngIf=\"password?.hasError('required')\">\n                        Password is <strong>required</strong>\n                    </mat-error>\n                </mat-form-field>\n                <button mat-stroked-button type=\"submit\" [disabled]='!signupFormGroup.valid'>signup</button>\n                <span class=\"mt-4\">You already have an account ? <a class=\"link\" style=\"color: blue; text-decoration: underline;\" (click)=\"gotoLoginComponent()\">login</a></span>\n            </form>\n        </div>\n    </div>\n</div>\n","import { Injectable } from \"@angular/core\";\nimport { ApiConstant } from \"src/app/common/ApiConstant\";\nimport { PMConstants } from \"src/app/common/PMConstants\";\nimport { LoginOutputDTO } from \"src/app/dto/login.output.interface\";\nimport { API } from \"src/app/services/Api\";\nimport { RoutingService } from \"src/app/services/routing.service\";\nimport { sessionManagerService } from \"src/app/services/sessionManager.service\";\n\n@Injectable()\nexport class LoginService {\n    constructor(private api: API,\n                private routingService: RoutingService,\n                private sessionManager: sessionManagerService) {\n\n    }\n    public login(output: LoginOutputDTO): void {\n        this.api.postWithoutHeaders(ApiConstant.USERS_BASE_URI + '/' + ApiConstant.LOGIN_URI, output)\n                    .subscribe((response) => {\n                        this.sessionManager.setUserid(response.id);\n                        localStorage.setItem(PMConstants.SESSION_TOKEN_ID_KEY, response.token);\n                        this.api.setHttpOptions(response.token);\n\n                        this.routingService.gotoProjectComponent();\n                    });\n    }\n}"],"sourceRoot":"webpack:///"}